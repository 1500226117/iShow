<template>
    <div class="drap-resize_main" >
        <div class="line" :class="direction.e">
            <div class="drap-resize_e"></div>
        </div>
        <div class="drap-resize_sline line" :class="direction.s">
            <div class="drap-resize_s"></div>
        </div>
        <div class="drap-resize_wline line" :class="direction.w">
            <div class="drap-resize_w"></div>
        </div>
        <div class="drap-resize_nline line" :class="direction.n">
            <div class="drap-resize_n"></div>
        </div>
        <div class="drap-resize_ne" :class="direction.ne"></div>
        <div class="drap-resize_se" :class="direction.se"></div>
        <div class="drap-resize_sw" :class="direction.sw"></div>
        <div class="drap-resize_nw" :class="direction.nw"></div>
        <!-- :style="{
        width: width + 'px',
        height: height + 'px'
      }" -->
    </div>
</template>
<script>
// @input="changeText"
//v-html="content"
import bus from 'views/ishow/js/bus';
import draggable from 'views/ishow/js/draggable';
const dragEle = ['.drap-resize_eline', '.drap-resize_sline', '.drap-resize_wline', '.drap-resize_nline', '.drap-resize_e', '.drap-resize_s', '.drap-resize_w', '.drap-resize_n', '.drap-resize_ne', '.drap-resize_se', '.drap-resize_sw', '.drap-resize_nw'];
const lineArr=['drap-resize_eline','drap-resize_sline','drap-resize_wline','drap-resize_nline'];
const pointArr=['drap-resize_ne','drap-resize_se','drap-resize_sw','drap-resize_nw'];
const 
export default {
    data() {
            return {
                width: this.elWidth,
                height: this.elHeight,
                top: this.cursorTop,
                left: this.cursorLeft,
                startPos:{
                    top:0,
                    pos:[0,0]
                },
                direction:{
                    e:'drap-resize_eline',
                    s:'drap-resize_sline',
                    w:'drap-resize_wline',
                    n:'drap-resize_nline',
                    ne:'drap-resize_ne',
                    se:'drap-resize_se',
                    sw:'drap-resize_sw',
                    nw:'drap-resize_nw'
                }
            }
        },
        props: ['elWidth', 'elHeight', 'cursorTop', 'cursorLeft','rotate'],
        created() {
            console.info(this.rotate)
        },
        watch: {
            //  elWidth(val) {
            //     this.width = val;
            // },
            // elHeight(val) {
            //     this.height = val;
            // }, 
            cursorTop(val) {
                this.top = val;
            },
            cursorLeft(val) {
                this.left = val;
            }
        },

        methods: {
            setDire() {

            },
            //拖拽更新位置
            handleDrag(event, i) {
                let el = this.$el;
                let screen = document.getElementsByClassName('screen')[0].getBoundingClientRect();
                let target = this.$el.querySelector(dragEle[i]);
                let rect = el.getBoundingClientRect();
                let width, height, left, top;
                let x = event.clientX;
                let y = event.clientY;
                let t = rect.top;
                let b = rect.bottom;
                let l = rect.left;
                let r = rect.right;
                let w = rect.width;
                let h = rect.height;
                let ratio = w / h;
                
                // if(this.rotate>=45&&this.rotate<135){
                //     //n-e
                //     i+=1;
                //     i=i%4===0?i-4:i;
                // }else if(this.rotate>=135&&this.rotate<225){
                //     //n-s
                //     i+=2;
                //     i=i%4===0||i%4===1?i-4:i;
                // }else if(this.rotate>=225&&this.rotate<315){
                //     //n-w
                //     i-=1;
                //     i=i===-1?3:i===3?7:i===7?11:i;
                // }
                //console.info('255',i)
                
                //e
                if (i === 0 || i === 4) {
                    width = x - this.startPos.l;
                    this.width = range(width);
                    if(this.rotate>=45&&this.rotate<135){
                        //n-e
                        
                    }else if(this.rotate>=135&&this.rotate<225){
                        //n-s
                        
                    }else if(this.rotate>=225&&this.rotate<315){
                        //n-w
                       
                    }
                    console.info('e ,x,this.startPos.l,x - this.startPos.l,this.startPos.w',x ,this.startPos.l,x - this.startPos.l,this.startPos.w)
                }
                //s
                if (i === 1 || i === 5) {
                    height = y - this.startPos.t;
                    this.height = range(height);
                    console.info('s')
                }
                //w
                if (i === 2 || i === 6) {
                    width = this.startPos.r - x;
                    //width=this.startPos.w+this.startPos.pos[0]-x;
                    left = x - screen.left;
                    this.left = rangeMax(left, r);
                    this.width = range(width);
                    console.info('w')
                } //n
                if (i === 3 || i === 7) {
                    // height =b - y;
                    // top = y - screen.top;

                    //height=h+this.startPos[1]-y;
                    //height=top;
                    //console.info('n11',b,top+h,y,event.clientY)
                    //console.info('7777',t,this.startPos.pos[1]-y)
                    height=this.startPos.t+this.startPos.h-y;
                    console.info('n,height,this.startPos.h,y - screen.top,this.startPos.t',height,this.startPos.h,y - screen.top,this.startPos.t)
                    // top=this.startPos.t+this.startPos.pos[1]-y;
                    top = y - screen.top;
                    this.top=top;
                    //this.top = rangeMax(top, b);
                    this.height = range(height);
                    //console.info('n',this.top,this.height)
                }
                //ne
                if (i === 8) {
                    //height = b - y;
                    height=this.startPos.h+this.startPos.pos[1]-y;
                    top = y - screen.top;
                    this.top = rangeMax(top, b);
                    this.height = range(height);
                    this.width = ratio * this.height;
                }
                //se
                if (i === 9) {
                    height = y - t;
                    this.height = height < 0 ? 0 : height;
                    this.width = ratio * this.height;
                }
                //sw
                if (i === 10) {
                    //width = r - x;
                    width = this.startPos.w+this.startPos.pos[0]-x;
                    left = x - screen.left;
                    this.left = rangeMax(left, r);
                    this.width = range(width);
                    this.height = this.width / ratio;
                }
                //nw
                if (i === 11) {
                    // height = b - y;
                    // width = r - x;
                    height=this.startPos.h+this.startPos.pos[1]-y;
                    width = this.startPos.w+this.startPos.pos[0]-x;
                    if (height - h > width - w) {
                        top = y - screen.top;
                        let changeTop = top - this.top;
                        this.top = rangeMax(top, b);
                        this.height = range(height);
                        this.width = ratio * this.height;
                        this.left = changeTop * ratio + this.left;
                    } else {
                        left = x - screen.left;
                        let changeLeft = left - this.left;
                        this.left = rangeMax(left, r);
                        this.width = range(width);
                        this.height = this.width / ratio;
                        this.top = changeLeft * ratio + this.top;
                    }

                }
                //console.info('this.startPos',x-this.startPos.pos[0],y-this.startPos.pos[1])
                //this.startPos=[x,y];
                bus.$emit('drap-size-update', this.width, this.height, this.top, this.left);
                //this.startPos.pos=[x,y]
            },
            dragCall(i) {
                let target = this.$el.querySelector(dragEle[i]);
                let isStart;
                draggable(target, {
                    start: (event) => {
                        this.setPos();
                    },
                    drag: (event) => {
                        this.handleDrag(event, i);
                    },
                    end: (event) => {
                        //this.handleDrag(event, i);
                        this.setPos();
                    }
                });
            },
            setPos() {
                let el = this.$el;
                let screen = document.getElementsByClassName('screen')[0].getBoundingClientRect();
                //let target = this.$el.querySelector(dragEle[i]);
                let rect = el.getBoundingClientRect();
                this.startPos.x = event.clientX;
                this.startPos.y = event.clientY;
                this.startPos.t = rect.top;
                this.startPos.b = rect.bottom;
                this.startPos.l = rect.left;
                this.startPos.r = rect.right;
                this.startPos.w = rect.width;
                this.startPos.h = rect.height;
                this.startPos.ratio = this.startPos.w / this.startPos.h;
                this.startPos.pos=[event.clientX,event.clientY];
            }
        },
        mounted() {
            for (var i = 0; i < dragEle.length; i++) {
                this.dragCall(i);
            }
            //this.update();
        }
};

function range(value) {
    return value < 0 ? 0 : value;
}

function rangeMax(value, max) {
    return value > max ? max : value;
}
function xxx(){
    // if(rotateType>=1&&rotateType<3){
    //     //n-e
    //     //e--旋转前状态
    //     if (i === 0 || i === 4) {
    //         movePos.set[i](_this,json,posResult.height);
    //     }
    //     //s
    //     if (i === 1 || i === 5) {
    //          movePos.set[i](_this,json,posResult.width);
    //     }
    //     //w
    //     if (i === 2 || i === 6) {
    //         movePos.set[i](_this,json,posResult.height,startPos.left);
    //     } 
    //     //n
    //     if (i === 3 || i === 7) {
    //         //console.info(333,i,posResult,startPos.left);
    //         movePos.set[i](_this,json,posResult.width,startPos.top);
    //     }
    //     //ne
    //     if (i === 8) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.top);
    //     }
    //     //se
    //     if (i === 9) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height);
    //     }
    //     //sw
    //     if (i === 10) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,posResult.left);
    //     }
    //     //nw
    //     if (i === 11) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left,startPos.top);
    //     }
    // }else if(rotateType>=3&&rotateType<5){
    //     //n-s
    //     //e--旋转前状态
    //     if (i === 0 || i === 4) {
    //         movePos.set[i](_this,json,posResult.width);
    //     }
    //     //s
    //     if (i === 1 || i === 5) {
    //          movePos.set[i](_this,json,posResult.height);
    //     }
    //     //w
    //     if (i === 2 || i === 6) {
    //         movePos.set[i](_this,json,posResult.width,startPos.left);
    //     } 
    //     //n
    //     if (i === 3 || i === 7) {
    //         movePos.set[i](_this,json,posResult.height,startPos.top);
    //     }
    //     //ne
    //     if (i === 8) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.top);
    //     }
    //     //se
    //     if (i === 9) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height);
    //     }
    //     //sw
    //     if (i === 10) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left);
    //     }
    //     //nw
    //     if (i === 11) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left,startPos.top);
    //     }
    // }else if(rotateType>=5&&rotateType<7){
    //     //n-w
    //     //e--旋转前状态
    //     if (i === 0 || i === 4) {
    //         movePos.set[i](_this,json,posResult.height);
    //     }
    //     //s
    //     if (i === 1 || i === 5) {
    //          movePos.set[i](_this,json,posResult.width);
    //     }
    //     //w
    //     if (i === 2 || i === 6) {
    //         movePos.set[i](_this,json,posResult.height,startPos.left);
    //     } 
    //     //n
    //     if (i === 3 || i === 7) {
    //         //console.info(333,i,posResult,startPos.left);
    //         movePos.set[i](_this,json,posResult.width,startPos.top);
    //     }
    //     //ne
    //     if (i === 8) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.top);
    //     }
    //     //se
    //     if (i === 9) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height);
    //     }
    //     //sw
    //     if (i === 10) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left);
    //     }
    //     //nw
    //     if (i === 11) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left,startPos.top);
    //     }
    // }else if(rotateType===0){
    //      //e--旋转前状态
    //     if (i === 0 || i === 4) {
    //         movePos.set[i](_this,json,posResult.width);
    //     }
    //     //s
    //     else if (i === 1 || i === 5) {
    //          movePos.set[i](_this,json,posResult.height);
    //     }
    //     //w
    //     else if (i === 2 || i === 6) {
    //         movePos.set[i](_this,json,posResult.width,posResult.left);
    //     } 
    //     //n
    //     else if (i === 3 || i === 7) {
    //         //console.info(333,i,posResult,startPos.left);
    //         movePos.set[i](_this,json,posResult.height,posResult.top);
    //     }
    //     //ne
    //     else if (i === 8) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,posResult.top);
    //     }
    //     //se
    //     else if (i === 9) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height);
    //     }
    //     //sw
    //     else if (i === 10) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,posResult.left);
    //     }
    //     //nw
    //     else if (i === 11) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,posResult.left,posResult.top);
    //     }
    // }
    // else{
    //      //e--旋转前状态
    //     if (i === 0 || i === 4) {
    //         movePos.set[i](_this,json,posResult.width);
    //     }
    //     //s
    //     else if (i === 1 || i === 5) {
    //          movePos.set[i](_this,json,posResult.height);
    //     }
    //     //w
    //     else if (i === 2 || i === 6) {
    //         movePos.set[i](_this,json,posResult.width,posResult.left);
    //     } 
    //     //n
    //     else if (i === 3 || i === 7) {
    //         //console.info(333,i,posResult,startPos.left);
    //         movePos.set[i](_this,json,posResult.height,posResult.top);
    //     }
    //     //ne
    //     else if (i === 8) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.top);
    //     }
    //     //se
    //     else if (i === 9) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height);
    //     }
    //     //sw
    //     else if (i === 10) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left);
    //     }
    //     //nw
    //     else if (i === 11) {
    //         movePos.set[i](_this,json,posResult.width,posResult.height,startPos.left,startPos.top);
    //     }
    // }
}
</script>
